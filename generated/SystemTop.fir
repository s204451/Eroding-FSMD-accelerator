;buildInfoPackage: chisel3, version: 3.3.2, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit SystemTop : 
  module DataMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, dataRead : UInt<32>, flip writeEnable : UInt<1>, flip dataWrite : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[DataMemory.scala 18:20]
    when io.testerEnable : @[DataMemory.scala 22:24]
      read mport _T = memory[io.testerAddress], clock @[DataMemory.scala 24:37]
      io.testerDataRead <= _T @[DataMemory.scala 24:23]
      io.dataRead <= UInt<32>("h00") @[DataMemory.scala 26:17]
      when io.testerWriteEnable : @[DataMemory.scala 27:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[DataMemory.scala 30:25]
        skip @[DataMemory.scala 27:32]
      skip @[DataMemory.scala 22:24]
    else : @[DataMemory.scala 32:16]
      read mport _T_2 = memory[io.address], clock @[DataMemory.scala 34:31]
      io.dataRead <= _T_2 @[DataMemory.scala 34:17]
      io.testerDataRead <= UInt<32>("h00") @[DataMemory.scala 36:23]
      when io.writeEnable : @[DataMemory.scala 37:26]
        write mport _T_3 = memory[io.address], clock
        _T_3 <= io.dataWrite
        io.dataRead <= io.dataWrite @[DataMemory.scala 40:19]
        skip @[DataMemory.scala 37:26]
      skip @[DataMemory.scala 32:16]
    
  module Accelerator : 
    input clock : Clock
    input reset : Reset
    output io : {flip start : UInt<1>, done : UInt<1>, address : UInt<16>, flip dataRead : UInt<32>, writeEnable : UInt<1>, dataWrite : UInt<32>}
    
    reg stateReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Accelerator.scala 19:25]
    reg xReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Accelerator.scala 22:21]
    reg yReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Accelerator.scala 23:21]
    reg dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 24:24]
    io.address <= UInt<1>("h00") @[Accelerator.scala 27:14]
    io.writeEnable <= UInt<1>("h00") @[Accelerator.scala 28:18]
    io.done <= UInt<1>("h00") @[Accelerator.scala 29:11]
    io.dataWrite <= dataReg @[Accelerator.scala 30:16]
    node _T = eq(UInt<4>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      when io.start : @[Accelerator.scala 35:22]
        stateReg <= UInt<4>("h01") @[Accelerator.scala 36:18]
        xReg <= UInt<1>("h00") @[Accelerator.scala 37:14]
        skip @[Accelerator.scala 35:22]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<4>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _T_2 = leq(xReg, UInt<5>("h013")) @[Accelerator.scala 41:17]
        when _T_2 : @[Accelerator.scala 41:26]
          yReg <= UInt<1>("h00") @[Accelerator.scala 42:14]
          stateReg <= UInt<4>("h02") @[Accelerator.scala 43:18]
          skip @[Accelerator.scala 41:26]
        else : @[Accelerator.scala 44:20]
          stateReg <= UInt<4>("h0b") @[Accelerator.scala 45:18]
          skip @[Accelerator.scala 44:20]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_3 = eq(UInt<4>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_3 : @[Conditional.scala 39:67]
          node _T_4 = leq(yReg, UInt<5>("h013")) @[Accelerator.scala 49:17]
          when _T_4 : @[Accelerator.scala 49:26]
            stateReg <= UInt<4>("h03") @[Accelerator.scala 50:18]
            skip @[Accelerator.scala 49:26]
          else : @[Accelerator.scala 51:20]
            node _T_5 = add(xReg, UInt<1>("h01")) @[Accelerator.scala 52:22]
            node _T_6 = tail(_T_5, 1) @[Accelerator.scala 52:22]
            xReg <= _T_6 @[Accelerator.scala 52:14]
            stateReg <= UInt<4>("h01") @[Accelerator.scala 53:18]
            skip @[Accelerator.scala 51:20]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_7 = eq(UInt<4>("h03"), stateReg) @[Conditional.scala 37:30]
          when _T_7 : @[Conditional.scala 39:67]
            node _T_8 = mul(UInt<5>("h014"), yReg) @[Accelerator.scala 57:33]
            node _T_9 = add(xReg, _T_8) @[Accelerator.scala 57:26]
            node _T_10 = tail(_T_9, 1) @[Accelerator.scala 57:26]
            io.address <= _T_10 @[Accelerator.scala 57:18]
            node _T_11 = eq(yReg, UInt<1>("h00")) @[Accelerator.scala 58:17]
            node _T_12 = eq(yReg, UInt<5>("h013")) @[Accelerator.scala 58:33]
            node _T_13 = or(_T_11, _T_12) @[Accelerator.scala 58:25]
            node _T_14 = eq(xReg, UInt<1>("h00")) @[Accelerator.scala 58:50]
            node _T_15 = or(_T_13, _T_14) @[Accelerator.scala 58:42]
            node _T_16 = eq(xReg, UInt<5>("h013")) @[Accelerator.scala 58:66]
            node _T_17 = or(_T_15, _T_16) @[Accelerator.scala 58:58]
            node _T_18 = eq(io.dataRead, UInt<1>("h00")) @[Accelerator.scala 58:90]
            node _T_19 = or(_T_17, _T_18) @[Accelerator.scala 58:75]
            when _T_19 : @[Accelerator.scala 58:99]
              stateReg <= UInt<4>("h09") @[Accelerator.scala 59:18]
              skip @[Accelerator.scala 58:99]
            else : @[Accelerator.scala 60:20]
              stateReg <= UInt<4>("h04") @[Accelerator.scala 61:18]
              skip @[Accelerator.scala 60:20]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_20 = eq(UInt<4>("h04"), stateReg) @[Conditional.scala 37:30]
            when _T_20 : @[Conditional.scala 39:67]
              node _T_21 = mul(UInt<5>("h014"), yReg) @[Accelerator.scala 65:33]
              node _T_22 = add(xReg, _T_21) @[Accelerator.scala 65:26]
              node _T_23 = tail(_T_22, 1) @[Accelerator.scala 65:26]
              node _T_24 = sub(_T_23, UInt<1>("h01")) @[Accelerator.scala 65:40]
              node _T_25 = tail(_T_24, 1) @[Accelerator.scala 65:40]
              io.address <= _T_25 @[Accelerator.scala 65:18]
              node _T_26 = eq(io.dataRead, UInt<1>("h00")) @[Accelerator.scala 66:25]
              when _T_26 : @[Accelerator.scala 66:34]
                stateReg <= UInt<4>("h09") @[Accelerator.scala 67:18]
                skip @[Accelerator.scala 66:34]
              else : @[Accelerator.scala 68:20]
                stateReg <= UInt<4>("h05") @[Accelerator.scala 69:18]
                skip @[Accelerator.scala 68:20]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_27 = eq(UInt<4>("h05"), stateReg) @[Conditional.scala 37:30]
              when _T_27 : @[Conditional.scala 39:67]
                node _T_28 = mul(UInt<5>("h014"), yReg) @[Accelerator.scala 73:33]
                node _T_29 = add(xReg, _T_28) @[Accelerator.scala 73:26]
                node _T_30 = tail(_T_29, 1) @[Accelerator.scala 73:26]
                node _T_31 = add(_T_30, UInt<1>("h01")) @[Accelerator.scala 73:40]
                node _T_32 = tail(_T_31, 1) @[Accelerator.scala 73:40]
                io.address <= _T_32 @[Accelerator.scala 73:18]
                node _T_33 = eq(io.dataRead, UInt<1>("h00")) @[Accelerator.scala 74:25]
                when _T_33 : @[Accelerator.scala 74:34]
                  stateReg <= UInt<4>("h09") @[Accelerator.scala 75:18]
                  skip @[Accelerator.scala 74:34]
                else : @[Accelerator.scala 76:20]
                  stateReg <= UInt<4>("h06") @[Accelerator.scala 77:18]
                  skip @[Accelerator.scala 76:20]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_34 = eq(UInt<4>("h06"), stateReg) @[Conditional.scala 37:30]
                when _T_34 : @[Conditional.scala 39:67]
                  node _T_35 = mul(UInt<5>("h014"), yReg) @[Accelerator.scala 81:33]
                  node _T_36 = add(xReg, _T_35) @[Accelerator.scala 81:26]
                  node _T_37 = tail(_T_36, 1) @[Accelerator.scala 81:26]
                  node _T_38 = sub(_T_37, UInt<5>("h014")) @[Accelerator.scala 81:40]
                  node _T_39 = tail(_T_38, 1) @[Accelerator.scala 81:40]
                  io.address <= _T_39 @[Accelerator.scala 81:18]
                  node _T_40 = eq(io.dataRead, UInt<1>("h00")) @[Accelerator.scala 82:25]
                  when _T_40 : @[Accelerator.scala 82:34]
                    stateReg <= UInt<4>("h09") @[Accelerator.scala 83:18]
                    skip @[Accelerator.scala 82:34]
                  else : @[Accelerator.scala 84:20]
                    stateReg <= UInt<4>("h07") @[Accelerator.scala 85:18]
                    skip @[Accelerator.scala 84:20]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_41 = eq(UInt<4>("h07"), stateReg) @[Conditional.scala 37:30]
                  when _T_41 : @[Conditional.scala 39:67]
                    node _T_42 = mul(UInt<5>("h014"), yReg) @[Accelerator.scala 89:33]
                    node _T_43 = add(xReg, _T_42) @[Accelerator.scala 89:26]
                    node _T_44 = tail(_T_43, 1) @[Accelerator.scala 89:26]
                    node _T_45 = add(_T_44, UInt<5>("h014")) @[Accelerator.scala 89:40]
                    node _T_46 = tail(_T_45, 1) @[Accelerator.scala 89:40]
                    io.address <= _T_46 @[Accelerator.scala 89:18]
                    node _T_47 = eq(io.dataRead, UInt<1>("h00")) @[Accelerator.scala 90:25]
                    when _T_47 : @[Accelerator.scala 90:34]
                      stateReg <= UInt<4>("h09") @[Accelerator.scala 91:18]
                      skip @[Accelerator.scala 90:34]
                    else : @[Accelerator.scala 92:20]
                      stateReg <= UInt<4>("h08") @[Accelerator.scala 93:18]
                      skip @[Accelerator.scala 92:20]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_48 = eq(UInt<4>("h08"), stateReg) @[Conditional.scala 37:30]
                    when _T_48 : @[Conditional.scala 39:67]
                      node _T_49 = mul(UInt<5>("h014"), yReg) @[Accelerator.scala 97:33]
                      node _T_50 = add(xReg, _T_49) @[Accelerator.scala 97:26]
                      node _T_51 = tail(_T_50, 1) @[Accelerator.scala 97:26]
                      node _T_52 = add(_T_51, UInt<9>("h0190")) @[Accelerator.scala 97:40]
                      node _T_53 = tail(_T_52, 1) @[Accelerator.scala 97:40]
                      io.address <= _T_53 @[Accelerator.scala 97:18]
                      dataReg <= UInt<8>("h0ff") @[Accelerator.scala 98:15]
                      io.writeEnable <= UInt<1>("h01") @[Accelerator.scala 99:22]
                      stateReg <= UInt<4>("h0a") @[Accelerator.scala 100:16]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_54 = eq(UInt<4>("h09"), stateReg) @[Conditional.scala 37:30]
                      when _T_54 : @[Conditional.scala 39:67]
                        node _T_55 = mul(UInt<5>("h014"), yReg) @[Accelerator.scala 103:33]
                        node _T_56 = add(xReg, _T_55) @[Accelerator.scala 103:26]
                        node _T_57 = tail(_T_56, 1) @[Accelerator.scala 103:26]
                        node _T_58 = add(_T_57, UInt<9>("h0190")) @[Accelerator.scala 103:40]
                        node _T_59 = tail(_T_58, 1) @[Accelerator.scala 103:40]
                        io.address <= _T_59 @[Accelerator.scala 103:18]
                        dataReg <= UInt<1>("h00") @[Accelerator.scala 104:15]
                        io.writeEnable <= UInt<1>("h01") @[Accelerator.scala 105:22]
                        stateReg <= UInt<4>("h0a") @[Accelerator.scala 106:16]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_60 = eq(UInt<4>("h0a"), stateReg) @[Conditional.scala 37:30]
                        when _T_60 : @[Conditional.scala 39:67]
                          node _T_61 = add(yReg, UInt<1>("h01")) @[Accelerator.scala 109:20]
                          node _T_62 = tail(_T_61, 1) @[Accelerator.scala 109:20]
                          yReg <= _T_62 @[Accelerator.scala 109:12]
                          stateReg <= UInt<4>("h02") @[Accelerator.scala 110:16]
                          skip @[Conditional.scala 39:67]
                        else : @[Conditional.scala 39:67]
                          node _T_63 = eq(UInt<4>("h0b"), stateReg) @[Conditional.scala 37:30]
                          when _T_63 : @[Conditional.scala 39:67]
                            io.done <= UInt<1>("h01") @[Accelerator.scala 113:15]
                            stateReg <= UInt<4>("h0b") @[Accelerator.scala 114:16]
                            skip @[Conditional.scala 39:67]
    
  module SystemTop : 
    input clock : Clock
    input reset : UInt<1>
    output io : {done : UInt<1>, flip start : UInt<1>, flip testerDataMemEnable : UInt<1>, flip testerDataMemAddress : UInt<16>, testerDataMemDataRead : UInt<32>, flip testerDataMemWriteEnable : UInt<1>, flip testerDataMemDataWrite : UInt<32>}
    
    inst dataMemory of DataMemory @[SystemTop.scala 18:26]
    dataMemory.clock <= clock
    dataMemory.reset <= reset
    inst accelerator of Accelerator @[SystemTop.scala 19:27]
    accelerator.clock <= clock
    accelerator.reset <= reset
    io.done <= accelerator.io.done @[SystemTop.scala 23:11]
    accelerator.io.start <= io.start @[SystemTop.scala 24:24]
    accelerator.io.dataRead <= dataMemory.io.dataRead @[SystemTop.scala 27:27]
    dataMemory.io.address <= accelerator.io.address @[SystemTop.scala 28:25]
    dataMemory.io.dataWrite <= accelerator.io.dataWrite @[SystemTop.scala 29:27]
    dataMemory.io.writeEnable <= accelerator.io.writeEnable @[SystemTop.scala 30:29]
    dataMemory.io.testerAddress <= io.testerDataMemAddress @[SystemTop.scala 33:31]
    io.testerDataMemDataRead <= dataMemory.io.testerDataRead @[SystemTop.scala 34:28]
    dataMemory.io.testerDataWrite <= io.testerDataMemDataWrite @[SystemTop.scala 35:33]
    dataMemory.io.testerEnable <= io.testerDataMemEnable @[SystemTop.scala 36:30]
    dataMemory.io.testerWriteEnable <= io.testerDataMemWriteEnable @[SystemTop.scala 37:35]
    
