;buildInfoPackage: chisel3, version: 3.3.2, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit SystemTop : 
  module DataMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, dataRead : UInt<32>, flip writeEnable : UInt<1>, flip dataWrite : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[DataMemory.scala 18:20]
    when io.testerEnable : @[DataMemory.scala 22:24]
      read mport _T = memory[io.testerAddress], clock @[DataMemory.scala 24:37]
      io.testerDataRead <= _T @[DataMemory.scala 24:23]
      io.dataRead <= UInt<32>("h00") @[DataMemory.scala 26:17]
      when io.testerWriteEnable : @[DataMemory.scala 27:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[DataMemory.scala 30:25]
        skip @[DataMemory.scala 27:32]
      skip @[DataMemory.scala 22:24]
    else : @[DataMemory.scala 32:16]
      read mport _T_2 = memory[io.address], clock @[DataMemory.scala 34:31]
      io.dataRead <= _T_2 @[DataMemory.scala 34:17]
      io.testerDataRead <= UInt<32>("h00") @[DataMemory.scala 36:23]
      when io.writeEnable : @[DataMemory.scala 37:26]
        write mport _T_3 = memory[io.address], clock
        _T_3 <= io.dataWrite
        io.dataRead <= io.dataWrite @[DataMemory.scala 40:19]
        skip @[DataMemory.scala 37:26]
      skip @[DataMemory.scala 32:16]
    
  module Accelerator : 
    input clock : Clock
    input reset : Reset
    output io : {flip start : UInt<1>, done : UInt<1>, address : UInt<16>, flip dataRead : UInt<32>, writeEnable : UInt<1>, dataWrite : UInt<32>}
    
    reg stateReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Accelerator.scala 19:25]
    reg xReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Accelerator.scala 22:21]
    reg yReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Accelerator.scala 23:21]
    io.address <= UInt<1>("h00") @[Accelerator.scala 26:14]
    io.writeEnable <= UInt<1>("h00") @[Accelerator.scala 27:18]
    io.done <= UInt<1>("h00") @[Accelerator.scala 28:11]
    io.dataWrite <= UInt<1>("h00") @[Accelerator.scala 29:16]
    node _T = eq(UInt<4>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      when io.start : @[Accelerator.scala 35:22]
        stateReg <= UInt<4>("h01") @[Accelerator.scala 36:18]
        xReg <= UInt<1>("h00") @[Accelerator.scala 37:14]
        skip @[Accelerator.scala 35:22]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<4>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _T_2 = mul(UInt<5>("h014"), yReg) @[Accelerator.scala 47:33]
        node _T_3 = add(xReg, _T_2) @[Accelerator.scala 47:26]
        node _T_4 = tail(_T_3, 1) @[Accelerator.scala 47:26]
        io.address <= _T_4 @[Accelerator.scala 47:18]
        node _T_5 = eq(xReg, UInt<5>("h014")) @[Accelerator.scala 48:18]
        when _T_5 : @[Accelerator.scala 48:28]
          stateReg <= UInt<4>("h08") @[Accelerator.scala 49:18]
          skip @[Accelerator.scala 48:28]
        else : @[Accelerator.scala 50:34]
          node _T_6 = eq(yReg, UInt<5>("h014")) @[Accelerator.scala 50:24]
          when _T_6 : @[Accelerator.scala 50:34]
            node _T_7 = add(xReg, UInt<1>("h01")) @[Accelerator.scala 51:22]
            node _T_8 = tail(_T_7, 1) @[Accelerator.scala 51:22]
            xReg <= _T_8 @[Accelerator.scala 51:14]
            yReg <= UInt<1>("h00") @[Accelerator.scala 52:14]
            stateReg <= UInt<4>("h01") @[Accelerator.scala 53:18]
            skip @[Accelerator.scala 50:34]
          else : @[Accelerator.scala 56:108]
            node _T_9 = leq(xReg, UInt<5>("h013")) @[Accelerator.scala 54:24]
            node _T_10 = leq(yReg, UInt<5>("h013")) @[Accelerator.scala 55:24]
            node _T_11 = and(_T_9, _T_10) @[Accelerator.scala 54:32]
            node _T_12 = eq(yReg, UInt<1>("h00")) @[Accelerator.scala 56:25]
            node _T_13 = eq(yReg, UInt<5>("h013")) @[Accelerator.scala 56:41]
            node _T_14 = or(_T_12, _T_13) @[Accelerator.scala 56:33]
            node _T_15 = eq(xReg, UInt<1>("h00")) @[Accelerator.scala 56:58]
            node _T_16 = or(_T_14, _T_15) @[Accelerator.scala 56:50]
            node _T_17 = eq(xReg, UInt<5>("h013")) @[Accelerator.scala 56:74]
            node _T_18 = or(_T_16, _T_17) @[Accelerator.scala 56:66]
            node _T_19 = eq(io.dataRead, UInt<1>("h00")) @[Accelerator.scala 56:98]
            node _T_20 = or(_T_18, _T_19) @[Accelerator.scala 56:83]
            node _T_21 = and(_T_11, _T_20) @[Accelerator.scala 55:32]
            when _T_21 : @[Accelerator.scala 56:108]
              stateReg <= UInt<4>("h07") @[Accelerator.scala 57:18]
              skip @[Accelerator.scala 56:108]
            else : @[Accelerator.scala 58:20]
              stateReg <= UInt<4>("h02") @[Accelerator.scala 59:18]
              skip @[Accelerator.scala 58:20]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_22 = eq(UInt<4>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_22 : @[Conditional.scala 39:67]
          node _T_23 = mul(UInt<5>("h014"), yReg) @[Accelerator.scala 63:33]
          node _T_24 = add(xReg, _T_23) @[Accelerator.scala 63:26]
          node _T_25 = tail(_T_24, 1) @[Accelerator.scala 63:26]
          node _T_26 = sub(_T_25, UInt<1>("h01")) @[Accelerator.scala 63:40]
          node _T_27 = tail(_T_26, 1) @[Accelerator.scala 63:40]
          io.address <= _T_27 @[Accelerator.scala 63:18]
          node _T_28 = eq(io.dataRead, UInt<1>("h00")) @[Accelerator.scala 64:24]
          when _T_28 : @[Accelerator.scala 64:33]
            stateReg <= UInt<4>("h07") @[Accelerator.scala 65:18]
            skip @[Accelerator.scala 64:33]
          else : @[Accelerator.scala 66:19]
            stateReg <= UInt<4>("h03") @[Accelerator.scala 67:18]
            skip @[Accelerator.scala 66:19]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_29 = eq(UInt<4>("h03"), stateReg) @[Conditional.scala 37:30]
          when _T_29 : @[Conditional.scala 39:67]
            node _T_30 = mul(UInt<5>("h014"), yReg) @[Accelerator.scala 71:33]
            node _T_31 = add(xReg, _T_30) @[Accelerator.scala 71:26]
            node _T_32 = tail(_T_31, 1) @[Accelerator.scala 71:26]
            node _T_33 = add(_T_32, UInt<1>("h01")) @[Accelerator.scala 71:40]
            node _T_34 = tail(_T_33, 1) @[Accelerator.scala 71:40]
            io.address <= _T_34 @[Accelerator.scala 71:18]
            node _T_35 = eq(io.dataRead, UInt<1>("h00")) @[Accelerator.scala 72:24]
            when _T_35 : @[Accelerator.scala 72:33]
              stateReg <= UInt<4>("h07") @[Accelerator.scala 73:18]
              skip @[Accelerator.scala 72:33]
            else : @[Accelerator.scala 74:19]
              stateReg <= UInt<4>("h04") @[Accelerator.scala 75:18]
              skip @[Accelerator.scala 74:19]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_36 = eq(UInt<4>("h04"), stateReg) @[Conditional.scala 37:30]
            when _T_36 : @[Conditional.scala 39:67]
              node _T_37 = mul(UInt<5>("h014"), yReg) @[Accelerator.scala 79:33]
              node _T_38 = add(xReg, _T_37) @[Accelerator.scala 79:26]
              node _T_39 = tail(_T_38, 1) @[Accelerator.scala 79:26]
              node _T_40 = sub(_T_39, UInt<5>("h014")) @[Accelerator.scala 79:40]
              node _T_41 = tail(_T_40, 1) @[Accelerator.scala 79:40]
              io.address <= _T_41 @[Accelerator.scala 79:18]
              node _T_42 = eq(io.dataRead, UInt<1>("h00")) @[Accelerator.scala 80:24]
              when _T_42 : @[Accelerator.scala 80:33]
                stateReg <= UInt<4>("h07") @[Accelerator.scala 81:18]
                skip @[Accelerator.scala 80:33]
              else : @[Accelerator.scala 82:19]
                stateReg <= UInt<4>("h05") @[Accelerator.scala 83:18]
                skip @[Accelerator.scala 82:19]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_43 = eq(UInt<4>("h05"), stateReg) @[Conditional.scala 37:30]
              when _T_43 : @[Conditional.scala 39:67]
                node _T_44 = mul(UInt<5>("h014"), yReg) @[Accelerator.scala 87:33]
                node _T_45 = add(xReg, _T_44) @[Accelerator.scala 87:26]
                node _T_46 = tail(_T_45, 1) @[Accelerator.scala 87:26]
                node _T_47 = add(_T_46, UInt<5>("h014")) @[Accelerator.scala 87:40]
                node _T_48 = tail(_T_47, 1) @[Accelerator.scala 87:40]
                io.address <= _T_48 @[Accelerator.scala 87:18]
                node _T_49 = eq(io.dataRead, UInt<1>("h00")) @[Accelerator.scala 88:24]
                when _T_49 : @[Accelerator.scala 88:33]
                  stateReg <= UInt<4>("h07") @[Accelerator.scala 89:18]
                  skip @[Accelerator.scala 88:33]
                else : @[Accelerator.scala 90:19]
                  stateReg <= UInt<4>("h06") @[Accelerator.scala 91:18]
                  skip @[Accelerator.scala 90:19]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_50 = eq(UInt<4>("h06"), stateReg) @[Conditional.scala 37:30]
                when _T_50 : @[Conditional.scala 39:67]
                  node _T_51 = mul(UInt<5>("h014"), yReg) @[Accelerator.scala 95:33]
                  node _T_52 = add(xReg, _T_51) @[Accelerator.scala 95:26]
                  node _T_53 = tail(_T_52, 1) @[Accelerator.scala 95:26]
                  node _T_54 = add(_T_53, UInt<9>("h0190")) @[Accelerator.scala 95:40]
                  node _T_55 = tail(_T_54, 1) @[Accelerator.scala 95:40]
                  io.address <= _T_55 @[Accelerator.scala 95:18]
                  io.dataWrite <= UInt<8>("h0ff") @[Accelerator.scala 96:20]
                  io.writeEnable <= UInt<1>("h01") @[Accelerator.scala 97:22]
                  node _T_56 = add(yReg, UInt<1>("h01")) @[Accelerator.scala 98:20]
                  node _T_57 = tail(_T_56, 1) @[Accelerator.scala 98:20]
                  yReg <= _T_57 @[Accelerator.scala 98:12]
                  stateReg <= UInt<4>("h01") @[Accelerator.scala 99:16]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_58 = eq(UInt<4>("h07"), stateReg) @[Conditional.scala 37:30]
                  when _T_58 : @[Conditional.scala 39:67]
                    node _T_59 = mul(UInt<5>("h014"), yReg) @[Accelerator.scala 102:33]
                    node _T_60 = add(xReg, _T_59) @[Accelerator.scala 102:26]
                    node _T_61 = tail(_T_60, 1) @[Accelerator.scala 102:26]
                    node _T_62 = add(_T_61, UInt<9>("h0190")) @[Accelerator.scala 102:40]
                    node _T_63 = tail(_T_62, 1) @[Accelerator.scala 102:40]
                    io.address <= _T_63 @[Accelerator.scala 102:18]
                    io.dataWrite <= UInt<1>("h00") @[Accelerator.scala 103:20]
                    io.writeEnable <= UInt<1>("h01") @[Accelerator.scala 104:22]
                    node _T_64 = add(yReg, UInt<1>("h01")) @[Accelerator.scala 105:20]
                    node _T_65 = tail(_T_64, 1) @[Accelerator.scala 105:20]
                    yReg <= _T_65 @[Accelerator.scala 105:12]
                    stateReg <= UInt<4>("h01") @[Accelerator.scala 106:16]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_66 = eq(UInt<4>("h08"), stateReg) @[Conditional.scala 37:30]
                    when _T_66 : @[Conditional.scala 39:67]
                      io.done <= UInt<1>("h01") @[Accelerator.scala 109:15]
                      stateReg <= UInt<4>("h08") @[Accelerator.scala 110:16]
                      skip @[Conditional.scala 39:67]
    
  module SystemTop : 
    input clock : Clock
    input reset : UInt<1>
    output io : {done : UInt<1>, flip start : UInt<1>, flip testerDataMemEnable : UInt<1>, flip testerDataMemAddress : UInt<16>, testerDataMemDataRead : UInt<32>, flip testerDataMemWriteEnable : UInt<1>, flip testerDataMemDataWrite : UInt<32>}
    
    inst dataMemory of DataMemory @[SystemTop.scala 18:26]
    dataMemory.clock <= clock
    dataMemory.reset <= reset
    inst accelerator of Accelerator @[SystemTop.scala 19:27]
    accelerator.clock <= clock
    accelerator.reset <= reset
    io.done <= accelerator.io.done @[SystemTop.scala 23:11]
    accelerator.io.start <= io.start @[SystemTop.scala 24:24]
    accelerator.io.dataRead <= dataMemory.io.dataRead @[SystemTop.scala 27:27]
    dataMemory.io.address <= accelerator.io.address @[SystemTop.scala 28:25]
    dataMemory.io.dataWrite <= accelerator.io.dataWrite @[SystemTop.scala 29:27]
    dataMemory.io.writeEnable <= accelerator.io.writeEnable @[SystemTop.scala 30:29]
    dataMemory.io.testerAddress <= io.testerDataMemAddress @[SystemTop.scala 33:31]
    io.testerDataMemDataRead <= dataMemory.io.testerDataRead @[SystemTop.scala 34:28]
    dataMemory.io.testerDataWrite <= io.testerDataMemDataWrite @[SystemTop.scala 35:33]
    dataMemory.io.testerEnable <= io.testerDataMemEnable @[SystemTop.scala 36:30]
    dataMemory.io.testerWriteEnable <= io.testerDataMemWriteEnable @[SystemTop.scala 37:35]
    
